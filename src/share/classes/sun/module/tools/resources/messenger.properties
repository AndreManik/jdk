#
# Copyright 2008 Sun Microsystems, Inc.  All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Sun designates this
# particular file as subject to the "Classpath" exception as provided
# by Sun in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
# CA 95054 USA or visit www.sun.com if you need additional information or
# have any questions.
#
error.usage=\
Usage: jam cptxf[v0] jam-file [-N module] [-C dir] files ...\n\
\      Options:\n\
\         -c  create new module archive\n\
\         -p  print the {0}\n\
\         -x  extract the archive\n\
\         -t  list the contents of the archive\n\
\         -v  generate verbose output on standard output\n\
\         -0  store only; use no ZIP compression\n\
\         -f  specify module archive file name\n\
\         -C  change to the specified directory and include the following file\n\
\         -N  module-name to be used, to construct the\n\
\              {0}\n\
If any file is a directory, then it is processed recursively.\n\n\
Example 1: to archive the hello module and its class files into a module\n\
\           archive called 'hello.jam':\n\
\           jam cvf hello.jam  hello/*.class\n\n\
Example 2: to archive the hello module, its class files, and all files in\n\
\           the foo/ directory into a module archive called 'hello.jam':\n\
\           jam cvf hello.jam hello/*.class -C foo/ .\n\n\
Example 3: to archive the hello module and its class files into a module\n\
\           archive compressed with pack200-gzip called 'hello.jam.pack.gz':\n\
\           jam cvf hello.jam.pack.gz hello/*.class\n\n\
Example 4: to print the {0} in the archive\n\
\           jam pf hello.jam\n\n\
Example 5: to print the {0} in the archive and learn why a class\n\
\          a class is not being exported:
\           jam pvf hello.jam\n\n\
Example 6: to create a module without a {1}\n\
\           jam cv -N foo.bar.AModule foo\n\
\           will create module foo.bar.AModule.jam in the current directory
error.cant.open=\
     cannnot open: {0}
error.file.create =\
     could not create file {0}
error.file.notfound =\
     file not found {0}
error.file.not.contain =\
     {0} does not contain {1}
error.file.suffix =\
     jam filename must end with .jar, .jam or .jam.pack.gz extensions
error.fatal.0 =\
     a fatal error has occured
error.fatal.1 =\
     a fatal error has occured, {0}
error.module.file.notfound =\
     no {0} found in the input files
error.module.files.notfound =\
     no {0} or {1} found in the  archive
error.module.file.found =\
     the input files should not contain {0}
error.module.files.found =\
     this archive {0} should not contain {1} or {2}
error.module.parsing.done =\
     all analysis of classes has been completed;
error.jam.signer =\
     not all entries in the JAM file are signed consistently by the same set of signers: {0}
error.url.notfile =\
     not a file URL: {0}
error.url.parsing =\
     URI parsing error
error.invalid.option =\
     error invalid option {0}
error.invalid.value =\
     error {0} cannot start with '-'
error.module.filename.conflict =\
     a filename cannot be specified with -N option
error.module.wrong.module =\
     the module {0} should not contain class {1} which is a member of {2}
info.class.notmodule =\
     is not a member of any module
info.class.notpublic =\
     is not public
info.jar.notembedded =\
     ignored: {0} is not an embedded jar
info.unexported.header =\
     Classes not exported:
error.module.not.file =\
     is not a {0} file
error.module.version.mismatch =\
     expected version {0} but found {1}
error.module.not.contain =\
     metadata should not contain {0}
