#
# Verify that the custom import policy is invoked
# and that it cannot try to indirectly recursively initialize itself.
#
>>> begin module m0
> annotations
@MainClass("m0.Main")
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m1")
})
> export
m0.Main
>> begin class m0.Main
        new m1.MainA().run("from m0");
>> end class
>>> end module
>>> begin module m1
> annotations
@MainClass("m1.MainA")
@ImportPolicyClass("m1.ImportPolicyImpl")
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m2")
})
> export
m1.Main
>> begin class m1.MainA
        if (ImportPolicyImpl.CALLED == false) {
            throw new Exception("Import policy not called");
        }
        new m2.MainB().run("from m1");
>> end class
>> begin class m1.ImportPolicyImpl
> super
implements ImportPolicy
> body
    static volatile boolean CALLED;

    public Map<ImportDependency,VersionConstraint> getImports(ModuleDefinition moduleDef,
            Map<ImportDependency,VersionConstraint> constraints, ImportPolicy defaultImportPolicy)
            throws ModuleInitializationException {
        CALLED = true;
        Repository rep = moduleDef.getRepository();
        ModuleDefinition md = rep.find("m3");
        Module m = md.getModuleInstance();
        ClassLoader cl = m.getClassLoader();
        try {
            Class clazz = cl.loadClass("m3.MainC");
            Object o = clazz.newInstance();
            System.out.println("m3: " + o);
        } catch (Exception e) {
            throw new ModuleInitializationException("could not get m3", e);
        }
        Map<ImportDependency,VersionConstraint> result = new HashMap<ImportDependency,VersionConstraint>();
        for (ImportDependency dep : moduleDef.getImportDependencies()) {
            md = rep.find(dep.getName(), dep.getVersionConstraint());
            result.put(dep, md.getVersion().toVersionConstraint());
        }
        return result;
    }
>> end class
>>> end module
>>> begin module m2
> annotations
@ImportModules({
    @ImportModule(name="java.se")
})
> export
m2.MainB
>> begin class m2.MainB
>> end class
>>> end module
>>> begin module m3
> annotations
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m1")
})
> export
m3.MainC
>> begin class m3.MainC
>> end class
>>> end module
>>> begin test m0
exception ModuleInitializationException
>>> end test
>>> begin test m1
exception ModuleInitializationException
>>> end test
