#
# Verify that the custom import policy is invoked
#
>>> begin module m1
> annotations
@MainClass("m1.MainA")
@ImportPolicyClass("m1.ImportPolicyImpl")
@ImportModules({
    @ImportModule(name="java.se")
})
> export
m1.Main
>> begin class m1.MainA
        if (ImportPolicyImpl.CALLED == false) {
            throw new Exception("Import policy not called");
        }
>> end class
>> begin class m1.ImportPolicyImpl
> super
implements ImportPolicy
> body
    static volatile boolean CALLED;

    public Map<ImportDependency,VersionConstraint> getImports(ModuleDefinition moduleDef,
                Map<ImportDependency,VersionConstraint> constraints, ImportPolicy defaultImportPolicy)
            throws UnsatisfiedDependencyException {
        CALLED = true;
        Map<ImportDependency,VersionConstraint> result = new HashMap<ImportDependency,VersionConstraint>();
        Repository rep = moduleDef.getRepository();
        for (ImportDependency dep : moduleDef.getImportDependencies()) {
            ModuleDefinition md = rep.find(dep.getName());
            result.put(dep, md.getVersion().toVersionConstraint());
        }
        return result;
    }
>> end class
>>> end module
>>> begin test m1
return
>>> end test
