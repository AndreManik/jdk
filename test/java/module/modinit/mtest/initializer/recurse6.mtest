#
# Verify that the module initializer for m0 is invoked
# and that it instantiating the invalid module m1 does not cause initialization
# of m0 to fail.
#
>>> begin module m0
> annotations
@MainClass("m0.Main")
@ModuleInitializerClass("m0.InitializerImpl")
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m4")
})
> export
m0.Main
>> begin class m0.Main
        new m4.MainD().run("from m0");
        System.out.println("OK");
>> end class
>> begin class m0.InitializerImpl
> super
implements ModuleInitializer
> body
    public void initialize(Module module) throws ModuleInitializationException {
        ModuleDefinition moduleDef = module.getModuleDefinition();
        Repository rep = moduleDef.getRepository();
        ModuleDefinition md = rep.find("m1");
        Module m = null;
        try {
            m = md.getModuleInstance();
        } catch (ModuleInitializationException e) {
            System.out.println("OK: " + e);
        }
        if (m != null) {
            throw new ModuleInitializationException("Unexpectedly got m1: " + m);
        }
    }
    public void release(Module module) {
    }
>> end class
>>> end module
>>> begin module m1
> annotations
@MainClass("m1.MainA")
@ModuleInitializerClass("m1.InitializerImpl")
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m2")
})
> export
m1.Main
>> begin class m1.MainA
        // Checks to see if m1's initializer is called properly.
        //
        if (InitializerImpl.INIT_COUNT < 1) {
            throw new Exception("Module initializer's initialize() in m1 is not called");
        } else if (InitializerImpl.INIT_COUNT > 1) {
            throw new Exception("Module initializer's initialize() in m1 is called more than once");
        }
        new m2.MainB().run("from m1");
>> end class
>> begin class m1.InitializerImpl
> super
implements ModuleInitializer
> body
    public static volatile int INIT_COUNT = 0;
    public static volatile int RELEASE_COUNT = 0;

    public void initialize(Module module) throws ModuleInitializationException {
        if (INIT_COUNT != 0) {
            throw new ModuleInitializationException("Module initializer's initialize() is called more than once");
        }
        INIT_COUNT++;

        try {
            Repository rep = module.getModuleDefinition().getRepository();
            ModuleDefinition md = rep.find("m3");
            Module m = md.getModuleInstance();
            ClassLoader cl = m.getClassLoader();
            Class clazz = cl.loadClass("m3.MainC");
            Object o = clazz.newInstance();
            System.out.println("m3: " + o);
        } catch (Exception e) {
            if (e instanceof ModuleInitializationException) {
                throw ((ModuleInitializationException) e);
            } else {
                throw new ModuleInitializationException("could not get m3", e);
            }
        }
    }
    public void release(Module module) {
        if (RELEASE_COUNT != 0) {
            throw new IllegalStateException ("Module initializer's release() is called more than once");
        }
        RELEASE_COUNT++;
    }
>> end class
>>> end module
>>> begin module m2
> annotations
@ImportModules({
    @ImportModule(name="java.se")
})
> export
m2.MainB
>> begin class m2.MainB
>> end class
>>> end module
>>> begin module m3
> annotations
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m4"),
    @ImportModule(name="m1")
})
> export
m3.MainC
>> begin class m3.MainC
>> end class
>>> end module
>>> begin module m4
> annotations
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m5")
})
> export
m4.MainD
>> begin class m4.MainD
        new m5.MainE().run("from m4");
>> end class
>>> end module
>>> begin module m5
> annotations
@ImportModules({
    @ImportModule(name="java.se")
})
> export
m5.MainE
>> begin class m5.MainE
>> end class
>>> end module
>>> begin test m0
return
>>> end test
>>> begin test m1
exception ModuleInitializationException
>>> end test
