#
# Verify that the module initializer is invoked and that exception it
# throws from release() is handled.
#
>>> begin module m1
> annotations
@MainClass("m1.MainA")
@ModuleInitializerClass("m1.InitializerImpl")
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m2")
})
> export
m1.Main
>> begin class m1.MainA
        if (InitializerImpl.INIT_COUNT < 1) {
            throw new Exception("Module initializer's initialize() is not called");
        } else if (InitializerImpl.INIT_COUNT > 1) {
            throw new Exception("Module initializer's initialize() is called more than once");
        }
        ModuleDefinition moduleDef = module.getModuleDefinition();
        Repository r = moduleDef.getRepository();
        ModuleSystem ms = r.getModuleSystem();
        ms.releaseModule(moduleDef);

        if (InitializerImpl.INIT_COUNT != 1) {
            throw new Exception("Module initializer's initialize() is called more than once");
        }

        if (InitializerImpl.RELEASE_COUNT < 1) {
            throw new Exception("Module initializer's release() is not called");
        } else if (InitializerImpl.RELEASE_COUNT > 1) {
            throw new Exception("Module initializer's release() is called more than once");
        }
        new m2.MainB().run("from m1");
>> end class
>> begin class m1.InitializerImpl
> super
implements ModuleInitializer
> body
    static volatile int INIT_COUNT = 0;
    static volatile int RELEASE_COUNT = 0;

    public void initialize(Module module) {
        INIT_COUNT++;
    }
    public void release(Module module) {
        RELEASE_COUNT++;
        throw new RuntimeException("aborted");
    }
>> end class
>>> end module
>>> begin module m2
> annotations
@ImportModules({
    @ImportModule(name="java.se")
})
> export
m2.MainB
>> begin class m2.MainB
>> end class
>>> end module
>>> begin test m1
return
>>> end test
