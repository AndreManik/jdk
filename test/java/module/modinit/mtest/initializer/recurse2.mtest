#
# Verify that the module initializer is invoked
# and that it cannot try to recursively initialize itself.
#
>>> begin module m1
> annotations
@MainClass("m1.MainA")
@ModuleInitializerClass("m1.InitializerImpl")
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m2")
})
> export
m1.Main
>> begin class m1.MainA
        // Checks to see if m1's initializer is called properly.
        //
        if (InitializerImpl.INIT_COUNT < 1) {
            throw new Exception("Module initializer's initialize() in m1 is not called");
        } else if (InitializerImpl.INIT_COUNT > 1) {
            throw new Exception("Module initializer's initialize() in m1 is called more than once");
        }
        new m2.MainB().run("from m1");
>> end class
>> begin class m1.InitializerImpl
> super
implements ModuleInitializer
> body
    public static volatile int INIT_COUNT = 0;
    public static volatile int RELEASE_COUNT = 0;

    public void initialize(ModuleDefinition moduleDef) throws ModuleInitializationException {
        if (INIT_COUNT != 0) {
            throw new ModuleInitializationException("Module initializer's initialize() is called more than once");
        }
        INIT_COUNT++;

        try {
            // recursive call
            Module m = moduleDef.getModuleInstance();
        } catch (Exception e) {
            if (e instanceof ModuleInitializationException) {
                throw ((ModuleInitializationException) e);
            } else {
                throw new ModuleInitializationException("could not get m1", e);
            }
        }
    }
    public void release() {
        if (RELEASE_COUNT != 0) {
            throw new IllegalStateException("Module initializer's release() is called more than once");
        }
        RELEASE_COUNT++;
    }
>> end class
>>> end module
>>> begin module m2
> annotations
@ImportModules({
    @ImportModule(name="java.se")
})
> export
m2.MainB
>> begin class m2.MainB
>> end class
>>> end module
>>> begin module m3
> annotations
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m2")
})
> export
m3.MainC
>> begin class m3.MainC
>> end class
>>> end module
>>> begin test m1
exception ModuleInitializationException
>>> end test
