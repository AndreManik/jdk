#
# m1 imports m2
# m2 imports reexports m3
#
# m1 and m3 both define class m.Class1
# Initialization of m1 should fail
#
# NOTE that because we do not have real spkg file with membership lists yet,
# we need to export all classes we care about
#
>>> begin module m1
> annotations
@MainClass("m1.MainA")
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m2")
})
> export
m1.MainA
m.Class1
>> begin class m1.MainA
        new m2.MainB().run("from m1");
        new m3.MainC().run("from m1");
	if (m.Class1.V != 2) {
	    throw new Exception("Wrong Class1");
	}
	System.out.println("OK");
>> end class
>> begin class m.Class1
> body
    public static int V = 1;
>> end class
>>> end module
>>> begin module m2
> annotations
@MainClass("m2.MainB")
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m3", reexport=true)
})
> export
m2.MainB
>> begin class m2.MainB
        new m3.MainC().run("from m2");
>> end class
>>> end module
>>> begin module m3
> annotations
@MainClass("m3.MainC")
@ImportModules({
    @ImportModule(name="java.se")
})
> export
m3.MainC
m.Class1
>> begin class m3.MainC
	if (m.Class1.V != 2) {
	    throw new Exception("Wrong Class1");
	}
	System.out.println("OK");
>> end class
>> begin class m.Class1
> body
    public static int V = 2;
>> end class
>>> end module
>>> begin test m1
exception ModuleInitializationException
>>> end test
>>> begin test m2
return
>>> end test
>>> begin test m3
return
>>> end test
