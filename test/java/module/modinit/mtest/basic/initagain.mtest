#
# m1 imports m2
#
# m2 initially missing -> initialization of m1 fails
# m2 later made available -> initialization of m1 must succeed
#
>>> begin module m0
> annotations
@MainClass("m0.Main")
@ImportModules({
    @ImportModule(name="java.se")
})
> export
m0.Main
>> begin class m0.Main
        ImportOverridePolicy oldPolicy = Modules.getImportOverridePolicy();
        ModuleDefinition md;
        try {
            Modules.setImportOverridePolicy(new OverridePolicyImpl());
            md = repository.find("m1");
            try {
                Module m = md.getModuleInstance();
                throw new Exception("Module not in error state: m1");
            } catch (ModuleInitializationException e) {
                System.out.println("OK: " + e);
            }
        } finally {
            Modules.setImportOverridePolicy(oldPolicy);
        }
        // give the module initialization thread a chance to run
        Thread.sleep(250);
        Module m = md.getModuleInstance();
        runOtherModule(m);
> body
    static class OverridePolicyImpl implements ImportOverridePolicy {
        public Map<ImportDependency,VersionConstraint> narrow(ModuleDefinition importer,
                Map<ImportDependency,VersionConstraint> constraints) {
            for (ImportDependency dep : constraints.keySet()) {
                if (dep.getName().equals("m2")) {
                    // use ImportOverridePolicy to make sure no match version of m2 is available
                    Map<ImportDependency,VersionConstraint> newConstraints = new HashMap<ImportDependency,VersionConstraint>(constraints);
                    newConstraints.put(dep, VersionConstraint.valueOf("2.0+"));
                    return newConstraints;
                }
            }
            return constraints;
        }
    }
>> end class
>>> end module
>>> begin module m1
> annotations
@MainClass("m1.MainA")
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m2")
})
> export
m1.MainA
>> begin class m1.MainA
        new m2.MainB().run(args);
>> end class
>>> end module
>>> begin module m2
> annotations
@MainClass("m2.MainB")
@ImportModules({
    @ImportModule(name="java.se")
})
> export
m2.MainB
>> begin class m2.MainB
>> end class
>>> end module
>>> begin test m0
return
>>> end test
