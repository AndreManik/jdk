#
# Verify that getExportedResources() return the correct information for 
# the exported resources within the module
#
>>> begin module m1
> annotations
@MainClass("m1.MainA")
@ImportModules({
    @ImportModule(name="java.se")
})
> export
m1.MainA
>> begin class m1.MainA
> run
    checkExportedResources();
> body
    private void checkExportedResources() throws Exception {
	ModuleDefinition moduleDef = module.getModuleDefinition();
	Repository r = moduleDef.getRepository();
	
	// m1 should have no exported resources
	Set<String> exportedResources = moduleDef.getExportedResources();
	if (exportedResources == null) {
	    throw new Exception("getExportedResources() should never return null.");
	}
	if (exportedResources.size() != 0) {
	    throw new Exception("m1 should have no exported resources.");
	}
	
	// m2 should export only r1.txt and r2.txt
	moduleDef = r.find("m2");
	exportedResources = moduleDef.getExportedResources();
	if (exportedResources == null) {
	    throw new Exception("getExportedResources() should never return null.");
	}	
	if (exportedResources.size() != 2) {
	    throw new Exception("m2 should export only two resources.");
	}
	if (exportedResources.contains("r1.txt") == false 
	    || exportedResources.contains("r2.txt") == false) {
	    throw new Exception("Missing exported resources in m2.");		
	}		

	// m3 should export only r1.txt, r2.txt, r3.txt, r4.txt, r5.txt, r6.txt. r7.txt, r8.txt, etc.
	moduleDef = r.find("m3");
	exportedResources = moduleDef.getExportedResources();
	if (exportedResources == null) {
	    throw new Exception("getExportedResources() should never return null.");
	}
	if (exportedResources.size() < 8) {
	    throw new Exception("m3 should export at least eight resources.");
	}
	if (exportedResources.contains("r1.txt") == false 
	    || exportedResources.contains("r2.txt") == false
	    || exportedResources.contains("a/r3.txt") == false
	    || exportedResources.contains("b/r4.txt") == false
	    || exportedResources.contains("a/c/r5.txt") == false
	    || exportedResources.contains("b/d/r6.txt") == false
	    || exportedResources.contains("aa/r7.txt") == false
	    || exportedResources.contains("bb/r8.txt") == false) {
	    throw new Exception("Missing exported resources in m3.");		
	}		
		
        // m4 should export only r3.txt and r6.txt
        moduleDef = r.find("m4");
        exportedResources = moduleDef.getExportedResources();
        if (exportedResources == null) {
            throw new Exception("getExportedResources() should never return null.");
        }
        if (exportedResources.size() != 2) {
            throw new Exception("m4 should export only two resources.");
        }
        if (exportedResources.contains("a/r3.txt") == false
            || exportedResources.contains("b/d/r6.txt") == false) {
            throw new Exception("Missing exported resources in m4.");		
        }		

        // m5 should export only r3.txt, r4.txt, r5.txt, r6.txt
        moduleDef = r.find("m5");
        exportedResources = moduleDef.getExportedResources();
        if (exportedResources == null) {
            throw new Exception("getExportedResources() should never return null.");
        }
        if (exportedResources.size() != 4) {
            throw new Exception("m5 should export only four resources.");
        }
	if (exportedResources.contains("a/r3.txt") == false
	    || exportedResources.contains("b/r4.txt") == false
	    || exportedResources.contains("a/c/r5.txt") == false
	    || exportedResources.contains("b/d/r6.txt") == false) {
	    throw new Exception("Missing exported resources in m5.");		
	}		

	// m6 should export only r3.txt, r5.txt, r8.txt
	moduleDef = r.find("m6");
	exportedResources = moduleDef.getExportedResources();
	if (exportedResources == null) {
	    throw new Exception("getExportedResources() should never return null.");
	}
	if (exportedResources.size() != 3) {
	    throw new Exception("m6 should export only three resources.");
	}
	if (exportedResources.contains("a/r3.txt") == false
	    || exportedResources.contains("a/c/r5.txt") == false
	    || exportedResources.contains("bb/r8.txt") == false) {
	    throw new Exception("Missing exported resources in m6.");		
	}		
    }    
>> end class
>>> end module
>>> begin module m2
> annotations
@ExportResources({
    "*"
})
> import
java.se
>> begin file r1.txt
> copy r1.txt
>> end file
>> begin file r2.txt
> copy r2.txt
>> end file
>> begin file a/r3.txt
> copy a/r3.txt
>> end file
>> begin file b/r4.txt
> copy b/r4.txt
>> end file
>> begin file a/c/r5.txt
> copy a/c/r5.txt
>> end file
>> begin file b/d/r6.txt
> copy b/d/r6.txt
>> end file
>> begin file aa/r7.txt
> copy aa/r7.txt
>> end file
>> begin file bb/r8.txt
> copy bb/r8.txt
>> end file
>>> end module
>>> begin module m3
> annotations
@ExportResources({
    "**/*"
})
@ImportModules({
    @ImportModule(name="java.se")
})
>> begin file r1.txt
> copy r1.txt
>> end file
>> begin file r2.txt
> copy r2.txt
>> end file
>> begin file a/r3.txt
> copy a/r3.txt
>> end file
>> begin file b/r4.txt
> copy b/r4.txt
>> end file
>> begin file a/c/r5.txt
> copy a/c/r5.txt
>> end file
>> begin file b/d/r6.txt
> copy b/d/r6.txt
>> end file
>> begin file aa/r7.txt
> copy aa/r7.txt
>> end file
>> begin file bb/r8.txt
> copy bb/r8.txt
>> end file
>>> end module
>>> begin module m4
> annotations
@ExportResources({
    "a/*",
    "b/d/*"
})
@ImportModules({
    @ImportModule(name="java.se")
})
>> begin file r1.txt
> copy r1.txt
>> end file
>> begin file r2.txt
> copy r2.txt
>> end file
>> begin file a/r3.txt
> copy a/r3.txt
>> end file
>> begin file b/r4.txt
> copy b/r4.txt
>> end file
>> begin file a/c/r5.txt
> copy a/c/r5.txt
>> end file
>> begin file b/d/r6.txt
> copy b/d/r6.txt
>> end file
>> begin file aa/r7.txt
> copy aa/r7.txt
>> end file
>> begin file bb/r8.txt
> copy bb/r8.txt
>> end file
>>> end module
>>> begin module m5
> annotations
@ExportResources({
    "a/**",
    "b/**"
})
@ImportModules({
    @ImportModule(name="java.se")
})
>> begin file r1.txt
> copy r1.txt
>> end file
>> begin file r2.txt
> copy r2.txt
>> end file
>> begin file a/r3.txt
> copy a/r3.txt
>> end file
>> begin file b/r4.txt
> copy b/r4.txt
>> end file
>> begin file a/c/r5.txt
> copy a/c/r5.txt
>> end file
>> begin file b/d/r6.txt
> copy b/d/r6.txt
>> end file
>> begin file aa/r7.txt
> copy aa/r7.txt
>> end file
>> begin file bb/r8.txt
> copy bb/r8.txt
>> end file
>>> end module
>>> begin module m6
> annotations
@ExportResources({
    "a/**",
    "bb/r8.txt"	
})
@ImportModules({
    @ImportModule(name="java.se")
})
>> begin file r1.txt
> copy r1.txt
>> end file
>> begin file r2.txt
> copy r2.txt
>> end file
>> begin file a/r3.txt
> copy a/r3.txt
>> end file
>> begin file b/r4.txt
> copy b/r4.txt
>> end file
>> begin file a/c/r5.txt
> copy a/c/r5.txt
>> end file
>> begin file b/d/r6.txt
> copy b/d/r6.txt
>> end file
>> begin file aa/r7.txt
> copy aa/r7.txt
>> end file
>> begin file bb/r8.txt
> copy bb/r8.txt
>> end file
>>> end module
>>> begin test m1
return
>>> end test
