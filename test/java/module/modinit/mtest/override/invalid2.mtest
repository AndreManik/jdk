#
# Verify that invalid constraints are rejected
#
>>> begin module m0
> annotations
@MainClass("m0.Main")
@ImportModules({
    @ImportModule(name="java.se")
})
> export
m0.Main
>> begin class m0.Main
> import
import java.lang.reflect.*;
> run
        ImportOverridePolicy defaultPolicy = Modules.getImportOverridePolicy();
        try {
            ImportOverridePolicy policy = new ImportOverridePolicyImpl();
            Modules.setImportOverridePolicy(policy);
            ModuleDefinition md = repository.find("m1");
            Module m = md.getModuleInstance();
            if (ImportOverridePolicyImpl.called == 0) {
                throw new Exception("ImportOverridePolicyImpl not called");
            }
            runOtherModule(m);
        } finally {
            Modules.setImportOverridePolicy(defaultPolicy);
        }
>> end class
>> begin class m0.ImportOverridePolicyImpl
> super
implements ImportOverridePolicy
> body
    static int called;

    public Map<ImportDependency,VersionConstraint> narrow(ModuleDefinition importer,
            Map<ImportDependency,VersionConstraint> constraints) {
        called++;
        System.out.println("Constraints for " + importer.getName() + ": " + constraints);
        if (importer.getName().equals("m1")) {
            Map<ImportDependency,VersionConstraint> newConstraints = new HashMap<ImportDependency,VersionConstraint>(constraints);
            for (ImportDependency dep : constraints.keySet()) {
                if (dep.getName().equals("m2")) {
                    newConstraints.remove(dep);
                }
            }
            System.out.println("New constraints for " + importer.getName() + ": " + newConstraints);
            return newConstraints;
        } else {
            return constraints;
        }
    }
>> end class
>>> end module
>>> begin module m1
> annotations
@MainClass("m1.MainA")
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m2")
})
> export
m1.MainA
>> begin class m1.MainA
        new m2.MainB().run("from m1");
        if (m2.MainB.V != 2) {
            throw new Exception("Wrong m2");
        }
>> end class
>>> end module
>>> begin module m2
> annotations
@Version("1.2")
@ImportModules({
    @ImportModule(name="java.se")
})
> export
m2.MainB
>> begin class m2.MainB
> body
        public static int V = 1;
>> end class
>>> end module
>>> begin module m2
> annotations
@Version("1.5")
@ImportModules({
    @ImportModule(name="java.se")
})
> export
m2.MainB
>> begin class m2.MainB
> body
        public static int V = 2;
>> end class
>>> end module
>>> begin test m0
exception ModuleInitializationException
>>> end test
