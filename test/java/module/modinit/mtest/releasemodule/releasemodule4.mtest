# Defines m1, m2, m3
# m1 imports m2 and m3 with default versionconstraint
# m2 imports m3 and m1 with default versionconstraint
# m3 imports m1 and m2 with default versionconstraint
# Test releases m3, and m1 and m2 should be released as a result.
>>> begin module m1
> annotations
@MainClass("m1.MainA")
@Version("1.0")
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m2"),
    @ImportModule(name="m3")
})
> export
m1.MainA
>> begin class m1.MainA
        new m2.MainB().run(args);
>> end class
>>> end module
>>> begin module m2
> annotations
@MainClass("m2.MainB")
@Version("1.0")
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m3"),
    @ImportModule(name="m1")
})
> export
m2.MainB
>> begin class m2.MainB
        new m3.MainC().run(args);
>> end class
>>> end module
>>> begin module m3
> annotations
@MainClass("m3.MainC")
@Version("1.0")
@ImportModules({
    @ImportModule(name="java.se"),
    @ImportModule(name="m1"),
    @ImportModule(name="m2")
})
> export
m3.MainC
>> begin class m3.MainC
    ModuleDefinition md1 = module.getModuleDefinition().getRepository().find("m1");
    ModuleDefinition md2 = module.getModuleDefinition().getRepository().find("m2");
    ModuleDefinition md3 = module.getModuleDefinition();
    Module m1 = null;
    Module m2 = null;
    Module m3 = null;

    try {
        m1 = md1.getModuleInstance();
        m2 = md2.getModuleInstance();
        m3 = md3.getModuleInstance();
    }
    catch(Throwable e) {
        throw new Exception("Module definitions cannot be instantiated.");
    }

    try {
        // Releases the "java.se" module definition.
        Repository r = Repository.getBootstrapRepository();
        ModuleDefinition se = r.find("java.se");
        ModuleSystem ms = se.getRepository().getModuleSystem();
        ms.releaseModule(se);
        throw new Exception("Standard module definition should not be released.");
    }
    catch(UnsupportedOperationException ise) {
    }
    catch(Throwable e) {
        throw new Exception("Incorrect exception is thrown when releasing standard module definition.");	
    }

    try {
        // Releases m3
        ModuleSystem ms = md3.getRepository().getModuleSystem();
        ms.releaseModule(md3);

        // instantiate m1, m2, m3 again
        Module mm1 = md1.getModuleInstance();
        Module mm2 = md2.getModuleInstance();
        Module mm3 = md3.getModuleInstance();
    	
        if (mm3 == m3) {
            throw new Exception("m3 was not released properly.");
        }

        if (mm2 == m2) {
            throw new Exception("m2 was not released as a result of releasing m3.");
        }
    					
        if (mm1 == m1) {
            throw new Exception("m1 was not released as a result of releasing m2.");
        }
    }
    catch(IllegalStateException ise) {
    }
    catch(Throwable e) {
        throw new Exception("Incorrect exception is thrown when instantiating module definition.");	
    }
>> end class
>>> end module
>>> begin test m1
return
>>> end test
